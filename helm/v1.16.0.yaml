global:
  cloudProvider:
    dockerRegistryUrl: acrarolibotnonprod.azurecr.io
    imagePullSecretName: "acr-registry"
    flavor: openshift
  tracing:
    enabled: false
    url: http://localhost:55681/v1/trace
  metrics:
    enabled: false
    url: http://localhost:55681/v1/metrics
  environment: raster-dev
  authentication:
    jwtPublicKeySecretName: map-colonies-jwks

authentication:
  ca:
    enabled: false
    useExternal: false
    externalSecretName: ""
  ssl:
    enabled: false
    useExternal: false
    externalSecretName: ""
  
opa:
  image: openpolicyagent/opa
  imageTag: 0.29.4-envoy-3
  port: 9191
  enableLogging: false
  resources:
    enabled: false
    value:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
envoy:
  image: envoyproxy/envoy
  imageTag: v1.20.7
  port: 8000
  maxRequestBytes: 8192
  requestedDomain: raster
  resources:
    enabled: false
    value:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi

rasterCommon:
  ca:
    secretName: ''
    path: '/usr/local/share/ca-certificates'
    key: 'ca.crt'
  authentication:
    opa:
      enabled: true
      customHeaderName: "x-api-key"
  db:
    host: "10.0.4.4"
    name: "raster-dev"
    port: 5432
    sslEnabled: false
    rejectUnauthorized: false
    secrets:
      useExternal: true
      externalSecretName: "raster-dev-postgres-secret"
  storage:
    enabled: true
    tilesStorageProvider: "FS"
    mapproxyConfigProvider: "DB"
    fs:
      internalPvc:
        enabled: true
        name: internal-pvc-nfs
        tilesSubPath: tiles
        configSubPath: config
    s3:
      enabled: false
      endpointUrl: "10.8.1.13:9000"
      tilesBucket: "raster-tiles-raster-dev"
      forcePathStyle: true
      sslEnabled: false
      virtualHosting: false
      awsHttps: false
      secretName: "discrete-new-ingestion-s3-secret"

environment: raster-dev
initialDelaySeconds: 60
splunkIndex: ""
resetOnConfigChange: true
imagePullPolicy: Always

cloudProvider:
  dockerRegistryUrl: my-registry-url.io
  imagePullSecretName: 'my-registry-secret'
  flavor: openshift

env:
  tracing:
    enabled: false
    url: http://localhost:55681/v1/trace
  metrics:
    enabled: false
    url: http://localhost:55681/v1/metrics

mapproxy:
  enabled: true
  socket:  
    connectionTimeoutSeconds: 60  # Set a connection timeout, nonnegative floating point number expressing *seconds*.
    timeoutSeconds: 60 # Set a operation timeout nonnegative, floating point number expressing *seconds*.
  wms:
    enabled: true
    replicaCount: 1
    resources:
      enabled: false
      value:
        limits:
          cpu: 200m
          memory: 128Mi
        requests:
          cpu: 200m
          memory: 128Mi
    nodePort: 30001
  wmts:
    enabled: true
    replicaCount: 1
    resources:
      enabled: false
      value:
        limits:
          cpu: 100m
          memory: 128Mi
        requests:
          cpu: 100m
          memory: 128Mi
    nodePort: 30002
  image:
    repository: docker-mapproxy
    tag: '1.16-seed-test'
  db:
    nameOverride:
    schema: MapproxyConfig
  port: 80
  targetPort: 8080
  uwsgi:
    socket: 3031
    httpSocket: 8080
    processes: 6
    threads: 10
    disableLogging: true
  env:
    cors:
      enabled: true
      allowedOrigin: '*'
      allowedHeaders: ''
    authentication:
      WMS:
        enabled: true
        requiredDomain: raster_wms
      token:
        queryName: token
        headerNameOverride: #will use "rasterCommon.authentication.opa.customHeaderName" if not specified
    ssl: # external paths
      CA_DIR: /opt/certs/ca/
      KEY_DIR: /opt/certs/key/
      CERT_DIR: /opt/certs/cert/
      CA_FILE_LOCATION: /opt/certs/ca/ca.pem
      KEY_FILE_LOCATION: /opt/certs/key/key.pem
      CERT_FILE_LOCATION: /opt/certs/cert/cert.pem
    openApiFilePath: ./openapi3.yaml
    requestsLogLevel: WARNING
    logLevel: WARNING
    logPrettyPrintEnabled: false
    responseCompressionEnabled: true
    requestPayloadLimit: 1mb
  route:
    enabled: true
    host: 
    path: /api/raster/v1
    https: true
    useCert: false
    timeout:
      enabled: false # defaults to 30s by openshift
      duration: 60s # supported units (us, ms, s, m, h, d)
  ingress:
    enabled: false
    type: 'nginx-org' # supported values: 'nginx-org' | 'nginx-kubernetes'
    path: /api/raster/v1
    host: 'localhost'
    tls: 
      enabled: true
      useExternal: ''

initContainer:
  image:
    repository: mapproxinator
    tag: "v1.0.10"
  env:
    logLevel: info
    ssl:
      CA_DIR: /opt/certs/ca/
      KEY_DIR: /opt/certs/key/
      CERT_DIR: /opt/certs/cert/
      CA_FILE_LOCATION: /opt/certs/ca/ca.pem
      KEY_FILE_LOCATION: /opt/certs/key/key.pem
      CERT_FILE_LOCATION: /opt/certs/cert/cert.pem
  resources:
    enabled: false
    value:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi

nginx:
  enabled: true
  volume:
    storage: 1000Mi
    accessModes: ReadWriteOnce
  cache:
    enabled: true
    cachePath: /cache
    levels: "1:2" # levels sets up a twoâ€‘level directory hierarchy under
    keysZone: mapproxy_cache
    keysZoneSize: 10m # 10m is about 80,000 keys
    maxSize: 900m # physical memory
    inactive: 60m
    expirationTime: 60m
    useTempPath: "off"
  replicaCount: 1
  image:
    repository: nginx
    tag: "merge"
  port: 8080
  internalServicePort: 80
  targetPort: 8080
  nodePort: 30003
  resources:
    enabled: true
    value:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi

mapproxinator:
  enabled: true
  replicaCount: 1
  image:
    repository: mapproxinator
    tag: "v1.0.10"
  port: 80
  targetPort: 8081
  nodePort: 30002
  env:
    logLevel: info
    poll:
      timeout:
        frequencyMS: 5000
        readinessKillMaxSeconds: 300
        requestsKillSeconds: 5
        afterUpdateDelaySeconds: 0.5
    ssl: # external paths
      CA_DIR: /opt/certs/ca/
      KEY_DIR: /opt/certs/key/
      CERT_DIR: /opt/certs/cert/
      CA_FILE_LOCATION: /opt/certs/ca/ca.pem
      KEY_FILE_LOCATION: /opt/certs/key/key.pem
      CERT_FILE_LOCATION: /opt/certs/cert/cert.pem
    logPrettyPrintEnabled: false
    responseCompressionEnabled: true
    requestPayloadLimit: 1mb
  resources:
    enabled: false
    value:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
