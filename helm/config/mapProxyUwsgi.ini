 {{- $metrics := (include "common.metrics.merged" .) | fromYaml }}
[uwsgi]
; based on https://github.com/kartoza/docker-mapproxy/blob/master/build_data/uwsgi.ini
chdir = /mapproxy
pyargv = /mapproxy.yaml
; attention  do not change - its releated to volumesMount configuration and mapproxinator
master-fifo = /uwsgi_config/fifo0
wsgi-file = app.py
pidfile=/tmp/mapproxy.pid
socket = :{{ .Values.mapproxy.uwsgi.socket }}
processes = {{ .Values.mapproxy.uwsgi.processes }} ; Maximum number of workers allowed
threads = {{ .Values.mapproxy.uwsgi.threads }}
; TODO: using default usgi config untill we figure out the best configuration
; cheaper = 2                                        ; Minimum number of workers allowed
enable-threads = true
master = true
disable-logging = {{ .Values.mapproxy.uwsgi.disableLogging }}
log-5xx = true
log-4xx = true
vacuum = true
die-on-term = true                   ; Shutdown when receiving SIGTERM (default is respawn)
need-app = true                      ; This parameter prevents uWSGI from starting if it is unable to find or load your application module
max-requests = 1000                  ; Restart workers after this many requests
reload-on-rss = 2048                 ; Restart workers after this much resident memory
buffer-size = 14336                  ; 14K, Set the internal buffer size for uwsgi packet parsing. Default is 4k. 
worker-reload-mercy = 60             ; How long to wait before forcefully killing workers
wsgi-disable-file-wrapper = true
harakiri = 60
py-callos-afterfork = true           ; allow workers to trap signals
; TODO: using default usgi config untill we figure out the best configuration
; cheaper-algo = busyness
; cheaper-initial = 2                  ; Workers created at startup
; cheaper-overload = 1                 ; Length of a cycle in seconds
; cheaper-step = 2                     ; How many workers to spawn at a time
; cheaper-busyness-multiplier = 30     ; How many cycles to wait before killing workers
; cheaper-busyness-min = 20            ; Below this threshold, kill workers (if stable for multiplier cycles)
; cheaper-busyness-max = 70            ; Above this threshold, spawn new workers
; cheaper-busyness-backlog-alert = 2   ; Spawn emergency workers if more than this many requests are waiting in the queue
; cheaper-busyness-backlog-step = 2    ; How many emergency workers to create if there are too many requests in the queue
chmod-socket = 664
uid = 1000
gid = 0
http-socket = :{{ .Values.mapproxy.uwsgi.httpSocket }}
{{ if $metrics.enabled }}
stats = :{{ .Values.mapproxy.uwsgi.statsServer.stats }}
stats-http = true
stats-min = {{ .Values.mapproxy.uwsgi.statsServer.statsMinify }}
{{ end }}
logger = uwsgilogger stdio
log-route = uwsgilogger ^((?!\{).)*$
log-encoder = json:uwsgilogger {"timestamp": "${strftime:%%Y-%%m-%%dT%%H:%%M:%%S}", "source": "uwsgi", "message": "${msg}"}
log-encoder = nl:uwsgilogger
; uWSGI request logs
route = /metrics donotlog: ; don't log metrics requests
logger-req = stdio
log-format = {"timestamp": "%(timestamp)", "source": "uwsgi", "type": "request", "status": %(status), "method": "%(method)", "path": "%(uri)", "user_agent": "%(uagent)", "duration_in_ms": %(msecs), "referer": "%(referer)", "host": "%(host)", "time": %(time), "remote_ip": "%(addr)"}
; metrics (add custom metrics)
; metric = name=foobar,type=absolute,oid=100.100.100,initial_value=9001
