global:
  cloudProvider:
    dockerRegistryUrl: my-registry-url.io
    imagePullSecretName: "my-registry-secret"
    flavor: openshift
  tracing:
    enabled: false
    url: http://localhost:55681/v1/trace
    samplingRatioDenominator: 1000
  metrics:
    enabled: false
    url: http://localhost:55681/v1/metrics
  environment: {}

rasterCommon:
  db:
    host: "localhost"
    name: "raster"
    port: 5432
    sslEnabled: false
    rejectUnauthorized: false
    secrets:
      useExternal: false
      externalSecretName: ""
  storage:
    tilesStorageProvider: "FS"
    mapproxyConfigProvider: "DB"
    fs:
      internalPvc:
        enabled: true
        name: internal-pvc
        tilesSubPath: tiles
    s3:
      enabled: false
      endpointUrl: "http://localhost:9000"
      tilesBucket: "raster"
      forcePathStyle: true
      sslEnabled: false
      virtualHosting: false
      awsHttps: false
      secretName: raster-config-s3-secret

environment: development
initialDelaySeconds: 60
splunkIndex: ""
resetOnConfigChange: true
imagePullPolicy: Always

cloudProvider:
  dockerRegistryUrl: my-registry-url.io
  imagePullSecretName: "my-registry-secret"
  flavor: openshift

env:
  tracing:
    enabled: false
    url: http://localhost:55681/v1/trace
  metrics:
    enabled: false
    url: http://localhost:55681/v1/metrics
    prometheus:
      port: 9117
      scrape: true

mapproxy:
  enabled: true
  wms:
    enabled: true
    replicaCount: 1
    resources:
      enabled: true
      value:
        limits:
          cpu: 200m
          memory: 128Mi
        requests:
          cpu: 200m
          memory: 128Mi
    nodePort: 30001
  wmts:
    enabled: true
    replicaCount: 1
    resources:
      enabled: true
      value:
        limits:
          cpu: 100m
          memory: 128Mi
        requests:
          cpu: 100m
          memory: 128Mi
    nodePort: 30002
  image:
    repository: mapproxy
    tag: "latest"
  db:
    nameOverride:
    schema: MapproxyConfig
  port: 80
  targetPort: 8080
  uwsgi:
    socket: 3031
    httpSocket: 8080
    processes: 6
    threads: 10
    disableLogging: true
    statsServer:
      enabled: false
      stats: 1717
      statsMinify: true
  env:
    openApiFilePath: ./openapi3.yaml
    requestsLogLevel: WARNING
    logLevel: WARNING
    logPrettyPrintEnabled: false
    responseCompressionEnabled: true
    requestPayloadLimit: 1mb
  route:
    enabled: true
    host:
    path: /api/raster/v1
    https: true
    useCert: false
    timeout:
      enabled: false # defaults to 30s by openshift
      duration: 60s # supported units (us, ms, s, m, h, d)
  ingress:
    enabled: false
    type: "nginx-org" # supported values: 'nginx-org' | 'nginx-kubernetes'
    path: /api/raster/v1
    host: "localhost"
    tls:
      enabled: true
      useExternal: ""

initContainer:
  image:
    repository: mapproxinator
    tag: "latest"
  env:
    logLevel: warn
    ssl:
      CA_DIR: /opt/certs/ca/
      KEY_DIR: /opt/certs/key/
      CERT_DIR: /opt/certs/cert/
      CA_FILE_LOCATION: /opt/certs/ca/ca.pem
      KEY_FILE_LOCATION: /opt/certs/key/key.pem
      CERT_FILE_LOCATION: /opt/certs/cert/cert.pem
  resources:
    enabled: true
    value:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi

nginx:
  enabled: true
  replicaCount: 2
  image:
    repository: nginx-otel-unprivileged
    tag: "v1.0.0"
  volume:
    storage: 1000Mi
    accessModes: ReadWriteOnce
  cache:
    enabled: true
    cachePath: /cache
    levels: "1:2" # levels sets up a twoâ€‘level directory hierarchy under
    keysZone: mapproxy_cache
    keysZoneSize: 10m # 10m is about 80,000 keys
    maxSize: 900m # physical memory
    inactive: 60m
    expirationTime: 60m
    useTempPath: "off"
  port: 8080
  internalServicePort: 80
  targetPort: 8080
  servicePort: 8080
  nodePort: 30001

  authorization:
    enabled: true
    url: http://opa-service.infra-services/v1/data/http/authz/decision
    domain: ""
    wmsDomain: "rasterWms"
    wmtsDomain: "raster"

  extraVolumes:
    - name: nginx-config
      configMap:
        name: "{{ .Release.Name }}-nginx-configmap"
    - name: cache #TODO: Find solution to mount cache volume with condition
      emptyDir:
        sizeLimit: "{{ .Values.volume.storage }}"
        medium: "Memory"

  extraVolumeMounts:
    - name: nginx-config
      mountPath: "/etc/nginx/conf.d/default.conf"
      subPath: default.conf
    - mountPath: "/etc/nginx/nginx.conf"
      name: nginx-config
      subPath: nginx.conf
    - name: nginx-config
      mountPath: "/etc/nginx/nginx.mapproxy.conf"
      subPath: nginx.mapproxy.conf
    - mountPath: "/etc/nginx/nginx.mapproxy.wmts.conf"
      name: nginx-config
      subPath: nginx.mapproxy.wmts.conf
    - mountPath: "/cache"
      name: cache
  resources:
    enabled: true
    value:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi

  route:
    enabled: true
    path: /api/raster/v1
    host:
    timeout:
      enabled: false # defaults to 30s by openshift
      duration: 60s # supported units (us, ms, s, m, h, d)
    tls:
      enabled: true
      useCerts: false
      certificate: ""
      key: ""
      caCertificate: ""

  ingress:
    enabled: false
    path: /api/raster/v1
    host: "localhost"
    tls:
      enabled: true
      useExternal: ""

mapproxinator:
  enabled: true
  replicaCount: 1
  image:
    repository: mapproxinator
    tag: "latest"
  port: 80
  targetPort: 8081
  nodePort: 30002
  env:
    logLevel: warn
    poll:
      timeout:
        frequencyMS: 5000
        readinessKillMaxSeconds: 300
        requestsKillSeconds: 5
        afterUpdateDelaySeconds: 0.5
    ssl: # external paths
      CA_DIR: /opt/certs/ca/
      KEY_DIR: /opt/certs/key/
      CERT_DIR: /opt/certs/cert/
      CA_FILE_LOCATION: /opt/certs/ca/ca.pem
      KEY_FILE_LOCATION: /opt/certs/key/key.pem
      CERT_FILE_LOCATION: /opt/certs/cert/cert.pem
    logPrettyPrintEnabled: false
    responseCompressionEnabled: true
    requestPayloadLimit: 1mb
  resources:
    enabled: true
    value:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi

uwsgiExporter:
  enabled: true
  image:
    repository: "timonwong/uwsgi-exporter"
    tag: "v1.3.0"
  env:
    logLevel: info # one of [debug, info, warn, error]
  port: 9117
  resources:
    enabled: true
    value:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
