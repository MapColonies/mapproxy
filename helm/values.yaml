global:
  cloudProvider:
    dockerRegistryUrl: my-registry-url.io
    imagePullSecretName: "my-registry-secret"
    flavor: openshift
  tracing:
    enabled: false
    url: ""
    samplingRatioDenominator: 1000
  metrics:
    enabled: false
    url: ""
    prometheus:
      port: 9117
      scrape: false
  environment: {}
  authentication:
    jwtPublicKeySecretName: map-colonies-jwks
  db:
    host: ""
    name: ""
    port: 5432
    sslEnabled: false
    schema: ""
    rejectUnauthorized: false
    secrets:
      useExternal: true
      externalSecretName: ""
  storage:
    tilesStorageProvider: ""
    mapproxyConfigProvider: ""
    fs:
      internalPvc:
        enabled: false
        name: internal-pvc-nfs
        tilesSubPath: ""
    s3:
      enabled: false
      endpointUrl: ""
      tilesBucket: ""
      forcePathStyle: true
      sslEnabled: false
      virtualHosting: false
      awsHttps: false
      secretName: ""
  ca:
    secretName: "root-ca"
    path: "/usr/local/share/ca-certificates"
    key: "ca.crt"
  ingress:
    domain: ""
  opalaEnabled: false
  gracefulReloadMaxSeconds: 300

# add pod annotations
# example:
# podAnnotations:
  # annotation1: annotation-value-1
  # annotation2: annotation-value-2
podAnnotations: {}

authentication:
  ssl:
    enabled: false
    useExternal: false
    externalSecretName: ""

db:
  host: ""
  name: ""
  port: 5432
  sslEnabled: false
  schema: ""
  rejectUnauthorized: false
  secrets:
    useExternal: false
    externalSecretName: ""
storage:
  tilesStorageProvider: ""
  mapproxyConfigProvider: ""
  fs:
    internalPvc:
      enabled: false
      name: ""
      tilesSubPath: ""
  s3:
    enabled: false
    endpointUrl: ""
    tilesBucket: ""
    forcePathStyle: true
    sslEnabled: false
    virtualHosting: false
    awsHttps: false
    secretName: ""

environment: development
initialDelaySeconds: 60
splunkIndex: ""
resetOnConfigChange: true
imagePullPolicy: Always

cloudProvider:
  dockerRegistryUrl: my-registry-url.io
  imagePullSecretName: "my-registry-secret"
  flavor: openshift

tracing:
  enabled: false
  url: ""
  samplingRatioDenominator: 1000
metrics:
  enabled: false
  url: ""
  prometheus:
    port: 9117
    scrape: false

mapproxy:
  enabled: true
  socket:
    connectionTimeoutSeconds: 0.1 # Set a connection timeout, nonnegative floating point number expressing *seconds*.
    timeoutSeconds: 0.1 # Set a operation timeout nonnegative, floating point number expressing *seconds*.
  wms:
    enabled: true
    replicaCount: 1
    resources:
      enabled: true
      value:
        limits:
          cpu: 200m
          memory: 128Mi
        requests:
          cpu: 200m
          memory: 128Mi
    nodePort: 30001
  wmts:
    enabled: true
    replicaCount: 1
    resources:
      enabled: false
      value:
        limits:
          cpu: 100m
          memory: 128Mi
        requests:
          cpu: 100m
          memory: 128Mi
    nodePort: 30002
  image:
    repository: mapproxy
    tag: "latest"
  db:
    nameOverride:
    schema: MapproxyConfig
  port: 80
  targetPort: 8080
  uwsgi:
    socket: 3031
    httpSocket: 8080
    processes: 6
    threads: 2
    disableLogging: true
    statsServer:
      enabled: false
      stats: 1717
      statsMinify: true
  env:
    openApiFilePath: ./openapi3.yaml
    requestsLogLevel: WARNING
    logLevel: WARNING
    logPrettyPrintEnabled: false
    responseCompressionEnabled: true
    requestPayloadLimit: 1mb

initContainer:
  image:
    repository: mapproxinator
    tag: "latest"
  env:
    logLevel: info
    ssl:
      CA_DIR: /opt/certs/ca/
      KEY_DIR: /opt/certs/key/
      CERT_DIR: /opt/certs/cert/
      CA_FILE_LOCATION: /opt/certs/ca/ca.pem
      KEY_FILE_LOCATION: /opt/certs/key/key.pem
      CERT_FILE_LOCATION: /opt/certs/cert/cert.pem
  resources:
    enabled: false
    value:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi

nginx:
  enabled: true
  fullnameOverride: ""
  replicaCount: 1
  image:
    repository: nginx-otel-unprivileged
    tag: "v1.0.0"
  volume:
    storage: 1000Mi
    accessModes: ReadWriteOnce
  cache:
    enabled: false
    cachePath: /cache
    levels: "1:2" # levels sets up a twoâ€‘level directory hierarchy under
    keysZone: mapproxy_cache
    keysZoneSize: 10m # 10m is about 80,000 keys
    maxSize: 900m # physical memory
    inactive: 60m
    expirationTime: 60m
    useTempPath: "off"

  envoy:
    image: envoyproxy/envoy
    imageTag: v1.20.7
    port: &envoyPort 8000
    maxRequestBytes: 8192
    requestedDomain: raster
    resources:
      enabled: false
      value:
        limits:
          cpu: 100m
          memory: 128Mi
        requests:
          cpu: 100m
          memory: 128Mi
  opa:
    image: openpolicyagent/opa
    imageTag: 0.29.4-envoy-3
    port: 9191
    createSecret: true
    jwtPublicKeySecretName: map-colonies-jwks
    customHeaderName: "x-api-key"
    secretName: docker-mapproxy-nginx-opa
    enableLogging: false
    logLevel: warn
    resources:
      enabled: false
      value:
        limits:
          cpu: 100m
          memory: 128Mi
        requests:
          cpu: 100m
          memory: 128Mi

  port: 8080
  internalServicePort: 80
  nginxTargetPort: &nginxTargetPort 8080
  targetPort: *envoyPort
  nodePort: 30001

  authorization:
    enabled: true
    url: http://opa-dev-opa-service.infra-services/v1/data/http/authz/decision
    token:
      queryName: token
    wms:
      enabled: true
      domain: "rasterWms"
    wmts:
      domain: "raster"

  extraVolumes:
    - name: nginx-config
      configMap:
        name: "{{ .Release.Name }}-mapproxy-nginx-configmap"
    - name: cache #TODO: Find solution to mount cache volume with condition
      emptyDir:
        sizeLimit: "{{ .Values.volume.storage }}"
        medium: "Memory"
    - name: proxy-config
      configMap:
        name: "{{ .Release.Name }}-mapproxy-envoy-configmap"
    - name: opa-policy
      secret:
        secretName: "{{ .Release.Name }}-opa"
    - name: jwt-public-keys
      secret:
        secretName: "{{ .Values.global.authentication.jwtPublicKeySecretName }}"

  extraVolumeMounts:
    - name: nginx-config
      mountPath: "/etc/nginx/conf.d/default.conf"
      subPath: default.conf
    - name: nginx-config
      mountPath: "/etc/nginx/nginx.conf"
      subPath: nginx.conf
    - name: nginx-config
      mountPath: "/etc/nginx/log_format.conf"
      subPath: log_format.conf
    - name: nginx-config
      mountPath: "/etc/nginx/nginx.mapproxy.conf"
      subPath: nginx.mapproxy.conf
    - name: nginx-config
      mountPath: "/etc/nginx/nginx.mapproxy.wmts.conf"
      subPath: nginx.mapproxy.wmts.conf
    - name: cache
      mountPath: "/cache"

  sidecars: |-
    {{- if and (not .Values.global.opalaEnabled) (.Values.authorization.enabled) }}
    - name: envoy
      image: {{ .Values.envoy.image }}:{{ .Values.envoy.imageTag }}
      volumeMounts:
      - name: proxy-config
        readOnly: true
        mountPath: /config
      - name: jwt-public-keys
        readOnly: true
        mountPath: /keys/mapColonies.jwks
        subPath: mapColonies.jwks
      args:
      - "envoy"
      - "--config-path"
      - "/config/envoy.yaml"
      ports:
      - name: http
        containerPort: 8000
        protocol: TCP
      {{- if .Values.envoy.resources.enabled }}
      resources:
        {{- toYaml .Values.envoy.resources.value | nindent 4 }}
      {{- end }}
    - name: opa
      image: "{{ .Values.opa.image }}:{{ .Values.opa.imageTag }}"
      volumeMounts:
      - readOnly: true
        mountPath: /policy
        name: opa-policy
      args:
      - "run"
      - "--server"
      - "--addr=0.0.0.0:8181"
      - "--diagnostic-addr=0.0.0.0:8282"
      - "--set=plugins.envoy_ext_authz_grpc.add=:{{ .Values.opa.imageTag }}"
      - "--set=plugins.envoy_ext_authz_grpc.path=envoy/authz/allow"
      {{- if .Values.opa.enableLogging }}
      - "--set=decision_logs.console=true"
      {{- end }}
      - "/policy/policy.rego"
      {{- if .Values.opa.resources.enabled }}
      resources:
        {{- toYaml .Values.opa.resources.value | nindent 12 }}
      {{- end }}
      livenessProbe:
        httpGet:
          path: /health?plugins
          port: 8282
        initialDelaySeconds: 5
        periodSeconds: 30
      readinessProbe:
        httpGet:
          path: /health?plugins
          port: 8282
        initialDelaySeconds: 5
        periodSeconds: 30
      {{- end }}

  resources:
    enabled: true
    value:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi

  route:
    enabled: true
    path: /api/raster/v1
    host:
    timeout:
      enabled: false # defaults to 30s by openshift
      duration: 60s # supported units (us, ms, s, m, h, d)
    tls:
      enabled: true
      useCerts: false
      certificate: ""
      key: ""
      caCertificate: ""

  ingress:
    enabled: false
    path: /api/raster/v1
    host: "localhost"
    domain: ""
    tls:
      enabled: true
      useExternal: ""

mapproxinator:
  enabled: true
  replicaCount: 1
  image:
    repository: mapproxinator
    tag: "latest"
  port: 80
  targetPort: 8081
  nodePort: 30002
  env:
    logLevel: info
    poll:
      timeout:
        frequencyMS: 5000
    ssl: # external paths
      CA_DIR: /opt/certs/ca/
      KEY_DIR: /opt/certs/key/
      CERT_DIR: /opt/certs/cert/
      CA_FILE_LOCATION: /opt/certs/ca/ca.pem
      KEY_FILE_LOCATION: /opt/certs/key/key.pem
      CERT_FILE_LOCATION: /opt/certs/cert/cert.pem
    logPrettyPrintEnabled: false
    responseCompressionEnabled: true
    requestPayloadLimit: 1mb
  resources:
    enabled: false
    value:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi

uwsgiExporter:
  enabled: true
  image:
    repository: "timonwong/uwsgi-exporter"
    tag: "v1.3.0"
  env:
    logLevel: info # one of [debug, info, warn, error]
  port: 9117
  resources:
    enabled: false
    value:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
